using UnityEngine;
using ProjectBorderland.Core.FreeRoam;
using ProjectBorderland.Core.PointAndClick;

namespace ProjectBorderland.Core.Manager
{
    /// <summary>
    /// Handles game states and overalls.
    /// </summary>
    public class GameManagerOLD : MonoBehaviour
    {
        //==============================================================================
        // Variables
        //==============================================================================
        #region singletonDDOL
        private static GameManagerOLD instance;
        public static GameManagerOLD Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = FindObjectOfType<GameManagerOLD>();

                    if (instance == null)
                    {
                        GameObject newGameObject = new GameObject();
                        newGameObject.name = typeof(GameManagerOLD).Name;
                        instance = newGameObject.AddComponent<GameManagerOLD>();
                    }
                }

                return instance;
            }
        }
        #endregion

        private PlayerMovement playerMovement;
        private PlayerCamera playerCamera;
        private PlayerItemHolder playerItemHolder;
        private FreeRoamInteraction freeRoamInteraction;
        private PointAndClickCamera pointAndClickCamera;
        private GameState currentGameState;

        [Header("Object References")]
        [SerializeField] private GameObject freeRoamPlayer;
        [SerializeField] private GameObject pointAndClickPlayer;

  

        //==============================================================================
        // Functions
        //==============================================================================
        #region MonoBehaviour methods
        private void Awake()
        {
            #region singletonDDOL
            if (instance == null)
            {
                instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
            #endregion

            playerMovement = freeRoamPlayer.GetComponentInChildren<PlayerMovement>();
            playerCamera = freeRoamPlayer.GetComponentInChildren<PlayerCamera>();
            playerItemHolder = freeRoamPlayer.GetComponentInChildren<PlayerItemHolder>();
            freeRoamInteraction = freeRoamPlayer.GetComponentInChildren<FreeRoamInteraction>();
            pointAndClickCamera = pointAndClickPlayer.GetComponentInChildren<PointAndClickCamera>();
        }
        #endregion



        #region ProjectBorderland methods
        /// <summary>
        /// Hides and locks player cursor.
        /// </summary>
        public static void HideCursor()
        {
            Cursor.visible = false;
            Cursor.lockState = CursorLockMode.Locked;
        }



        /// <summary>
        /// Shows and unlock
        /// </summary>
        public static void ShowCursor()
        {
            Cursor.visible = true;
            Cursor.lockState = CursorLockMode.None;
        }



        /// <summary>
        /// Switchs current game state to specified game state.
        /// </summary>
        /// <param name="gameState"></param>
        public static void SwitchGameState(GameState gameState)
        {
            if (gameState == GameState.FreeRoam)
            {
                HideCursor();
                instance.freeRoamPlayer.SetActive(true);
                instance.pointAndClickPlayer.SetActive(false);
            }

            else if (gameState == GameState.PointAndClick)
            {
                ShowCursor();
                instance.freeRoamPlayer.SetActive(false);
                instance.pointAndClickPlayer.SetActive(true);
            }
        }



        /// <summary>
        /// Disables first person movement and camera movement.
        /// </summary>
        public static void DisablePlayerMovement()
        {
            instance.playerMovement.enabled = false;
            instance.playerCamera.enabled = false;
            instance.playerMovement.Stop();
        }



        /// <summary>
        /// Enables first person movement and camera movement.
        /// </summary>
        public static void EnablePlayerMovement()
        {
            instance.playerMovement.enabled = true;
            instance.playerCamera.enabled = true;
        }



        /// <summary>
        /// Disables player first person item holder.
        /// </summary>
        public static void DisablePlayerItemHolder()
        {
            instance.playerItemHolder.enabled = false;
        }



        /// <summary>
        /// Enables player first person item holder.
        /// </summary>
        public static void EnablePlayerItemHolder()
        {
            instance.playerItemHolder.enabled = true;
        }



        /// <summary>
        /// Disables player free roam interact behaviour.
        /// </summary>
        public static void DisableFreeRoamInteract()
        {
            instance.freeRoamInteraction.enabled = false;
        }



        /// <summary>
        /// Enables player free roam interact behaviour.
        /// </summary>
        public static void EnableFreeRoamInteract()
        {
            instance.freeRoamInteraction.enabled = true;
        }



        /// <summary>
        /// Sets up point and click camera position and boundary.
        /// </summary>
        public static void SetUpPointAndClickCamera(CameraBoundary cameraBoundary)
        {
            instance.pointAndClickCamera.SetUpCamera(cameraBoundary.transform, cameraBoundary.MinimumCameraConstraint, cameraBoundary.MaximumCameraConstraint);
        }



        /// <summary>
        /// Enters item inspection mode.
        /// </summary>
        public static void EnterInspectMode()
        {
            if (instance.currentGameState == GameState.FreeRoam)
            {
                ShowCursor();
                DisablePlayerMovement();
                DisablePlayerItemHolder();
                DisableFreeRoamInteract();
            }

            else if (instance.currentGameState == GameState.PointAndClick)
            {

            }
        }



        /// <summary>
        /// Exits item inspection mode.
        /// </summary>
        public static void ExitInspectMode()
        {
            if (instance.currentGameState == GameState.FreeRoam)
            {
                HideCursor();
                EnablePlayerMovement();
                EnablePlayerItemHolder();
                EnableFreeRoamInteract();
            }

            else if (instance.currentGameState == GameState.PointAndClick)
            {

            }
        }



        /// <summary>
        /// Enters dialogue mode.
        /// </summary>
        public static void EnterDialogue()
        {
            if (instance.currentGameState == GameState.FreeRoam)
            {
                DisablePlayerItemHolder();
                DisablePlayerMovement();
                DisableFreeRoamInteract();

                Cursor.visible = true;
                Cursor.lockState = CursorLockMode.None;
            }
        }



        /// <summary>
        /// Exits dialogue mode.
        /// </summary>
        public static void ExitDialogue()
        {
            if (instance.currentGameState == GameState.FreeRoam)
            {
                EnablePlayerItemHolder();
                EnablePlayerMovement();
                EnableFreeRoamInteract();

                instance.playerItemHolder.Refresh();

                Cursor.visible = false;
                Cursor.lockState = CursorLockMode.Locked;
            }
        }



        /// <summary>
        /// Enables free roam related components.
        /// </summary>
        private void EnableFreeRoamState()
        {

        }


        
        /// <summary>
        /// Disables free roam related components.
        /// </summary>
        private void DisableFreeRoamState()
        {
            
        }



        /// <summary>
        /// Enables point and click related components.
        /// </summary>
        private void EnablePointAndClickState()
        {
            
        }



        /// <summary>
        /// Disables point and click related components.
        /// </summary>
        private void DisablePointAndClickState()
        {

        }
        #endregion
    }
}